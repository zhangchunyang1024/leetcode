package bite.l0190;

/**
 * @description:
 * 颠倒给定的 32 位无符号整数的二进制位。
 * 示例 1：
 *      输入: 00000010100101000001111010011100
 *      输出: 00111001011110000010100101000000
 *      解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
 *          因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
 * 示例 2：
 *      输入：11111111111111111111111111111101
 *      输出：10111111111111111111111111111111
 *      解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
 *      因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/reverse-bits
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @author: yangyangyang
 * @create: 2020-12-03 11:29
 **/
public class ReverseBitsYang
{
    /**
     * copy from jdk java.lang.Integer#reverse(int)
     * 按字节分步进行
     * @param n
     * @return
     */
    public int reverseBits(int n) {
        /**
         * 每2个字节 翻转
         * 1. n & 0x55555555
         *      a. 即 n & 0101 0101 0101 0101 0101 0101 0101 0101
         *      b. 得到奇数位的实际的位 并 置偶数位的位为 0
         * 2. n & 0x55555555 << 1
         *      a. 奇数位 移动到 其左边的偶数位
         *      b. 得到的结果为：偶数位被替换为其右边的奇数位，奇数位置为0
         *
         * 3. n >>> 1
         *      a. 实现数字右移，奇数位被替换为其左边的偶数位，最左的1位置0
         * 4. (n >>> 1) & 0x55555555
         *      a. 即 (n >>> 1) & 0101 0101 0101 0101 0101 0101 0101 0101
         *      b. 得到的结果为：奇数位被替换为其右边的奇数位，奇数位置为0
         *
         * 5.   (n & 0x55555555) << 1 | (n >>> 1) & 0x55555555
         *      a. (n & 0x55555555) << 1 两位翻转中偶数位是奇数位的结果  奇数位是0
         *      b. (n >>> 1) & 0x55555555 两位翻转中奇数位是偶数位的结果  偶数位是0
         *      c. 将(n & 0x55555555) << 1的结果  合并(n >>> 1) & 0x55555555 中的结果
         */
        n = (n & 0x55555555) << 1 | (n >>> 1) & 0x55555555;

        /**
         * 同理 每4位中的两位交换
         */
        n = (n & 0x33333333) << 2 | (n >>> 2) & 0x33333333;

        /**
         * 同理 每8位中的4位交换
         */
        n = (n & 0x0f0f0f0f) << 4 | (n >>> 4) & 0x0f0f0f0f;


        /**
         * 同理 每16位中的8位交换
         */
        n = (n & 0xff00ff) << 8 | (n >>> 8) & 0xff00ff;

        /**
         * 同理 每32位中的16位交换
         */
        n = (n & 0xffff) << 16 | (n >>> 16) & 0xffff;

        /**
         *  每16位中的8位交换 和 每32位中的16位交换
         *  可优化为：分别取出数字的每8位 然后 安置其顺序
         *  从左往右 1-8位： n & 0xff;
         *  从左往右 9-16位： n & 0xff00;
         *  从左往右 17-24位： n & 0xff0000;
         *  从左往右 24-32位： n & 0xff000000;
         *  则：
         *  n = ((n & 0xff)) << 24) | ((n & 0xff00) << 8)) | ((n & 0xff0000) >>> 8) | ((n & 0xff000000) >>> 24)
         *
         *  再优化：
         *  n = (n << 24) | ((n & 0xff00) << 8) | ((n & 0xff0000) >>> 8) | (n >>> 24)
         */

        return n;
    }
}
